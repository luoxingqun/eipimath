from manim import *
config.frame_width = 18
config.frame_height = 32
config.pixel_width = 1080
config.pixel_height = 1920
config.background_color = DARKER_GRAY
import math


class Run1(Scene):
    def construct(self):
        TracedPath.set_default(stroke_width=5)
        Tex.set_default(arg_separator=" ", font_size=70)
        MathTex.set_default(arg_separator=" ", font_size=70)
        DecimalNumber.set_default(font_size=70)
        
        #interval between animations
        nWait1 = 1.42 
        nWait2 = nWait1*2 

        #title
        texTitle1 = Tex(r"Explain logarithms \\ using exponents", font_size=150, color=ORANGE).move_to([0,11,0])
        texTitle2 = MathTex(r"y=2", r"^x", r"\iff", r"\log_{2}(y)=", r"x", font_size=90, color=ORANGE).next_to(texTitle1, DOWN, buff=1)

        #axes
        [axes_xMin, axes_xMax, axes_yMin, axes_yMax] = [0, 4, 0, 9]
        axes = Axes(
            x_range=[axes_xMin,axes_xMax],
            y_range=[axes_yMin,axes_yMax,1],
            x_length=14, y_length=10,
            x_axis_config={"tick_size":0.2, "line_to_number_buff":0.3, "numbers_to_include":range(0,4)}, y_axis_config={"numbers_to_include":[]}
        ).next_to(texTitle2, DOWN, buff=2.5)

        axesLabelX = axes.get_x_axis_label(MathTex(r"\log_{2}(y)=x"), RIGHT, UP).shift([-1.5,0.4,0])
        axesLabelY = axes.get_y_axis_label(MathTex(r"y=2^x"), UP, RIGHT).shift([0.5,-0.1,0])

        def f(x):
            return 2**x

        def fInv(y):
            return math.log(y,2)

        def vX(x, y=None):
            if isinstance(x, ValueTracker):
                x = x.get_value()
            if y == None:
                y = f(x)
            return axes.c2p(x,y,0)

        def vY(x, y):
            if isinstance(y, ValueTracker):
                y = y.get_value()
            return axes.c2p(x,f(y),0)

        x1 = ValueTracker(0)
        p1 = Point(vX(x1))\
            .add_updater(lambda i : i.move_to(vX(x1)))
        dot1 = Dot(radius=0.15, color=BLUE).move_to(p1)\
            .add_updater(lambda i : i.move_to(p1))
        graph1 = axes.plot(lambda x : 2**x, x_range=[0,3])

        dots = np.empty(9, object)
        dots[1] = Dot(radius=0.15).move_to(vX(math.log(1,2)))
        dots[2] = Dot(radius=0.15).move_to(vX(math.log(2,2)))
        dots[3] = Dot(radius=0.1).move_to(vX(math.log(3,2)))
        dots[4] = Dot(radius=0.15).move_to(vX(math.log(4,2)))
        dots[5] = Dot(radius=0.1).move_to(vX(math.log(5,2)))
        dots[6] = Dot(radius=0.1).move_to(vX(math.log(6,2)))
        dots[7] = Dot(radius=0.1).move_to(vX(math.log(7,2)))
        dots[8] = Dot(radius=0.15).move_to(vX(math.log(8,2)))

        VGroup(*dots[1:]).set_color(BLUE)

        dotLabels = np.empty(9, object)
        dotLabels[1] = MathTex("2^0", font_size=54).next_to(dots[1], UP).shift([0.4,0,0])
        dotLabels[2] = MathTex("2^1", font_size=54).next_to(dots[2], UP)
        dotLabels[3] = MathTex("3", font_size=36).next_to(dots[3], UP)
        dotLabels[4] = MathTex("2^2", font_size=54).next_to(dots[4], UP)
        dotLabels[5] = MathTex("5", font_size=36).next_to(dots[5], UP)
        dotLabels[6] = MathTex("6", font_size=36).next_to(dots[6], UP)
        dotLabels[7] = MathTex("7", font_size=36).next_to(dots[7], UP)
        dotLabels[8] = MathTex("2^3", font_size=54).next_to(dots[8], UP)
        VGroup(*dotLabels[1:]).set_color(BLUE)

        ticks = np.empty(9, object)
        ticks[1] = Line([1,0.4,0]).move_to(vX(math.log(1,2),0))
        ticks[3] = Line([1,0.2,0]).move_to(vX(math.log(3,2),0))
        ticks[5] = Line([1,0.2,0]).move_to(vX(math.log(5,2),0))
        ticks[6] = Line([1,0.2,0]).move_to(vX(math.log(6,2),0))
        ticks[7] = Line([1,0.2,0]).move_to(vX(math.log(7,2),0))

        tickLabels = np.empty(9, object)
        tickLabels[0] = Tex("0", font_size=36).next_to(ticks[1], DOWN, buff=0.15)

        texNum = DecimalNumber(2**x1.get_value(), 1).move_to(vX(x1,0.9*2**x1.get_value()-0.4))\
            .add_updater(lambda i : i.set_value(2**x1.get_value()).move_to(vX(x1,0.9*2**x1.get_value()-0.4)))
        texBase = Tex("= 2").next_to(texNum, RIGHT, buff=0.25)\
            .add_updater(lambda i : i.next_to(texNum, RIGHT, buff=0.25))
        texExp = DecimalNumber(x1.get_value(), 2, font_size=48, color=BLUE).next_to(texBase, UR, buff=0)\
            .add_updater(lambda i : i.set_value(x1.get_value()).next_to(texBase, UR, buff=0))

        arrow1 = Arrow([1,-1.5,0], color=BLUE).move_to(vX(x1,-1.2))\
            .add_updater(lambda i : i.move_to(vX(x1,-1.2)))
        texLog = MathTex(r"\log_{2}( \hskip 1.55em )=", font_size=48).next_to(arrow1, DOWN).shift([-0.2,0,0])\
            .add_updater(lambda i : i.next_to(arrow1, DOWN).shift([-0.2,0,0]))
        texLogNum = DecimalNumber(2**x1.get_value(), 1, font_size=48).move_to(texLog).shift([0.17,0,0])\
            .add_updater(lambda i : i.set_value(2**x1.get_value()).move_to(texLog).shift([0.17,0,0]))
        texLogExp = DecimalNumber(x1.get_value(), 2, font_size=48, color=BLUE).next_to(texLog, RIGHT, buff=0.25)\
            .add_updater(lambda i : i.set_value(x1.get_value()).next_to(texLog, RIGHT, buff=0.25))

        self.add(texTitle1, texTitle2)

        self.play(
            Create(VGroup(tickLabels[0], axes)),
            run_time=2
        )
        self.wait(nWait2 - 2)

        self.play(
            TransformFromCopy(texTitle2[0], axesLabelY),
            run_time=1
        )
        self.wait(nWait1 - 1)

        self.play(
            TransformFromCopy(texTitle2[3], axesLabelX),
            run_time=1
        )
        self.wait(nWait1 - 1)

        for i in [1,2,4,8]:
            self.play(
                FadeIn(dots[i], dotLabels[i]),
                run_time=0.5
            )
            self.wait(nWait1 - 0.5)

        self.play(
            Create(graph1),
            dotLabels[1].animate.become(MathTex("1", font_size=48, color=WHITE).next_to(dots[1], UP).shift([0.4,0,0])),
            dotLabels[2].animate.become(MathTex("2", font_size=48, color=WHITE).next_to(dots[2], UP)),
            dotLabels[4].animate.become(MathTex("4", font_size=48, color=WHITE).next_to(dots[4], UP)),
            dotLabels[8].animate.become(MathTex("8", font_size=48, color=WHITE).next_to(dots[8], UP)),
            VGroup(*dots[[1,2,4,8]]).animate.set_color(WHITE),
            run_time=1
        )
        self.wait(nWait2 - 1)

        VGroup(*ticks[[3,5,6,7]]).set_color(BLUE)
        for i in [3,5,6,7]:
            self.play(
                FadeIn(dots[i], dotLabels[i], ticks[i]),
                run_time=0.5
            )
            self.wait(nWait1 - 0.5)

        self.add(p1)
        self.play(
            VGroup(*dots[[3,5,6,7]], *dotLabels[[3,5,6,7]], *ticks[[3,5,6,7]]).animate.set_color(WHITE),
            FadeIn(dot1, texNum, texBase, texExp),
            run_time=0.5
        )
        self.wait(nWait2 - 0.5)

        self.play(
            FadeIn(arrow1, texLog),
            run_time=0.5
        )
        self.wait(nWait1 - 0.5)

        self.play(
            TransformFromCopy(texNum, texLogNum),
            run_time=1
        )
        self.wait(nWait1 - 1)

        self.play(
            TransformFromCopy(texExp, texLogExp),
            run_time=1
        )
        self.wait(nWait2 - 1)

        for i in range(2,9):
            self.play(
                x1.animate.set_value(math.log(i,2)),
                run_time=nWait1
            )
            self.wait(nWait1 - 0.05)

        p1.clear_updaters()
        VGroup(dot1, texNum, texBase, texExp, arrow1, texLog, texLogNum, texLogExp).clear_updaters()

        self.remove(p1)
        t0 = texTitle2[0].copy().set_color(WHITE)
        t1 = texTitle2[1].copy().set_color(BLUE)
        self.play(
            FadeOut(dot1),
            Transform(VGroup(texNum, texBase, texExp), VGroup(t0, t1)),
            run_time=1
        )
        self.remove(*texTitle2[0:2])
        self.wait(nWait2 - 1)

        t3= texTitle2[3].copy().set_color(WHITE)
        t4= texTitle2[4].copy().set_color(BLUE)
        self.play(
            FadeOut(arrow1),
            Transform(VGroup(texLog, texLogNum, texLogExp), VGroup(t3, t4)),
            run_time=1
        )
        self.remove(*texTitle2[3:5])
        self.wait(nWait2 - 1)
